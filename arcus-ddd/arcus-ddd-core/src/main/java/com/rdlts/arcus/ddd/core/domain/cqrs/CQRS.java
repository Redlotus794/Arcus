package com.rdlts.arcus.ddd.core.domain.cqrs;

/**
 * <h2>CQRS（Command Query Responsibility Segregation）架构简介</h2>
 *
 * <p>
 * 在CQRS（Command Query Responsibility Segregation）架构中，系统的读写操作被明确地分离为两个不同的模块或部分：命令（Command）用于执行写操作，而查询（Query）用于执行读操作。这种分离的核心理念基于对软件系统中操作的两种基本类型的认识：那些更改系统状态的操作（写入），以及那些仅请求系统状态但不更改它的操作（读取）。
 * <ul>
 *   <li><b>命令（Command）</b>：代表系统中执行操作的意图，这些操作会更改系统的状态。命令是执行写操作的指令，比如创建新的数据条目、更新现有数据或删除数据。每个命令通常都会执行一系列验证逻辑，以确保操作的有效性，然后才更改系统的状态 </li>
 *   <li><b>查询（Query）</b>：用于从系统中检索数据，不涉及状态的更改。查询操作专注于高效读取数据，提供所需信息的快速访问。因为查询不更改系统状态，它们可以优化数据的读取路径，例如，通过缓存常见的查询结果或使用特化的查询模型来提升性能。</li>
 * </ul>
 * </p>
 * <h3>模型分离</h3>
 * CQRS架构进一步将数据的读写模型分离，意味着用于读操作的模型（查询模型）和用于写操作的模型（命令模型）是独立设计的。这种分离允许每个模型根据其操作的特性进行优化：
 * <ul>
 *   <li><b>写模型（命令模型）</b>：专注于维护业务逻辑的完整性和数据的一致性。它通常涉及复杂的验证规则，确保数据的变更是合法且符合业务规则的。写模型设计为处理事务性操作，确保系统状态的正确更改。</li>
 *   <li><b>读模型（查询模型）</b>：优化为快速响应查询请求。读模型可以是数据的非规范化表示，专门为特定的查询操作或报表生成而设计。通过避免复杂的业务规则和数据关联，读模型可以极大地提高查询效率和性能。</li>
 * </ul>
 * <h3>优势</h3>
 * <ul>
 *   <li><b>性能优化</b>：读写操作可以独立优化，提高了系统的整体性能。例如，可以通过增加查询模型的读缓存或优化数据库索引来提升查询性能，而这些优化措施不会影响到写操作的处理。</li>
 *   <li><b>灵活性</b>：根据应用需求独立调整读写模型，提供了更大的灵活性。例如，如果查询操作的负载远高于写操作，可以单独扩展查询服务，而不需要改变命令处理服务。</li>
 *   <li><b>简化复杂性</b>：通过将关注点分离，CQRS简化了复杂业务逻辑的处理。开发者可以单独关注数据如何被更改（通过命令）和数据如何被查询（通过查询），从而减少单个模型中的复杂性。</li>
 *   <li><b>可维护性和可扩展性</b>：独立的读写模型使得系统更易于维护和扩展。当业务需求变化时，可以单独更新读模型或写模型，而不必担心影响到系统的其他部分。</li>
 * </ul>
 *
 * @author wangjialong
 * @since 2025/7/22 15:07
 */
interface CQRS {

}
